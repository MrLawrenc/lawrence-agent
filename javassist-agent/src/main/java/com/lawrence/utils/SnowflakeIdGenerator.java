package com.lawrence.utils;

import java.time.Instant;

/**
 * generated by chatgpt
 * 64-bit Snowflake ID generator
 * <p>
 * Layout (default):
 * 0 - 41 bits timestamp - 5 bits datacenterId - 5 bits workerId - 12 bits sequence
 * <p>
 * 注意：返回的 ID 为 signed long，但最高位始终为 0（正数）。
 */
public class SnowflakeIdGenerator {

    // 默认位数
    private final long workerIdBits = 5L;
    private final long datacenterIdBits = 5L;
    private final long sequenceBits = 12L;

    // 最大值
    private final long maxWorkerId = ~(-1L << workerIdBits); // 31
    private final long maxDatacenterId = ~(-1L << datacenterIdBits); // 31

    // 位移
    private final long workerIdShift = sequenceBits; // 12
    private final long datacenterIdShift = sequenceBits + workerIdBits; // 12 + 5 = 17
    private final long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits; // 12 + 5 + 5 = 22

    private final long sequenceMask = ~(-1L << sequenceBits); // 4095

    // 配置
    private final long workerId;
    private final long datacenterId;
    private final long epoch; // 自定义起始时间（毫秒）

    // 状态（受锁保护）
    private long lastTimestamp = -1L;
    private long sequence = 0L;

    /**
     * 构造器
     *
     * @param workerId     机器 ID (0..maxWorkerId)
     * @param datacenterId 数据中心 ID (0..maxDatacenterId)
     * @param epoch        起始时间戳（毫秒），通常设为项目上线时间，例如 2020-01-01 的 epochMillis
     */
    public SnowflakeIdGenerator(long workerId, long datacenterId, long epoch) {
        if (workerId < 0 || workerId > maxWorkerId) {
            throw new IllegalArgumentException(String.format("workerId must be between 0 and %d", maxWorkerId));
        }
        if (datacenterId < 0 || datacenterId > maxDatacenterId) {
            throw new IllegalArgumentException(String.format("datacenterId must be between 0 and %d", maxDatacenterId));
        }
        if (epoch >= System.currentTimeMillis()) {
            // 一般不允许 epoch 在将来
            throw new IllegalArgumentException("epoch must be less than current time");
        }

        this.workerId = workerId;
        this.datacenterId = datacenterId;
        this.epoch = epoch;
    }

    /**
     * 简单默认构造器：workerId=0 datacenterId=0 epoch=2020-01-01T00:00:00Z
     */
    public SnowflakeIdGenerator() {
        this(0, 0, Instant.parse("2020-01-01T00:00:00Z").toEpochMilli());
    }

    /**
     * 生成下一个 ID（线程安全）
     */
    public synchronized long nextId() {
        long timestamp = currentTime();

        if (timestamp < lastTimestamp) {
            // 时钟回拨保护：抛异常或等待。这里选择抛异常，调用方可以选择重试。
            throw new IllegalStateException(
                    String.format("Clock moved backwards. Refusing to generate id for %d milliseconds", lastTimestamp - timestamp));
        }

        if (lastTimestamp == timestamp) {
            // 同一毫秒内
            sequence = (sequence + 1) & sequenceMask;
            if (sequence == 0) {
                // 序列号溢出，等待下一毫秒
                timestamp = tilNextMillis(lastTimestamp);
            }
        } else {
            // 新的毫秒，重置 sequence
            sequence = 0L;
        }

        lastTimestamp = timestamp;

        long id = ((timestamp - epoch) << timestampLeftShift)
                | (datacenterId << datacenterIdShift)
                | (workerId << workerIdShift)
                | sequence;

        return id;
    }

    private long tilNextMillis(long lastTimestamp) {
        long timestamp = currentTime();
        while (timestamp <= lastTimestamp) {
            timestamp = currentTime();
        }
        return timestamp;
    }

    private long currentTime() {
        return System.currentTimeMillis();
    }

    /**
     * 将 id 解析成字段（timestamp, datacenterId, workerId, sequence）
     */
    public IdParts parseId(long id) {
        long sequence = id & sequenceMask;
        long workerId = (id >> workerIdShift) & ~(-1L << workerIdBits);
        long datacenterId = (id >> datacenterIdShift) & ~(-1L << datacenterIdBits);
        long timestamp = (id >> timestampLeftShift) + epoch;
        return new IdParts(timestamp, datacenterId, workerId, sequence);
    }

    public static class IdParts {
        public final long timestamp;
        public final long datacenterId;
        public final long workerId;
        public final long sequence;

        public IdParts(long timestamp, long datacenterId, long workerId, long sequence) {
            this.timestamp = timestamp;
            this.datacenterId = datacenterId;
            this.workerId = workerId;
            this.sequence = sequence;
        }

        @Override
        public String toString() {
            return "IdParts{" +
                    "timestamp=" + timestamp +
                    ", datacenterId=" + datacenterId +
                    ", workerId=" + workerId +
                    ", sequence=" + sequence +
                    '}';
        }
    }
}
